// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Covariance__new
SEXP Covariance__new(SEXP form_, SEXP data_, SEXP colnames_);
RcppExport SEXP _glmmrBase_Covariance__new(SEXP form_SEXP, SEXP data_SEXP, SEXP colnames_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type form_(form_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__new(form_, data_, colnames_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance_nngp__new
SEXP Covariance_nngp__new(SEXP form_, SEXP data_, SEXP colnames_);
RcppExport SEXP _glmmrBase_Covariance_nngp__new(SEXP form_SEXP, SEXP data_SEXP, SEXP colnames_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type form_(form_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance_nngp__new(form_, data_, colnames_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance_hsgp__new
SEXP Covariance_hsgp__new(SEXP form_, SEXP data_, SEXP colnames_);
RcppExport SEXP _glmmrBase_Covariance_hsgp__new(SEXP form_SEXP, SEXP data_SEXP, SEXP colnames_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type form_(form_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance_hsgp__new(form_, data_, colnames_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__Z
SEXP Covariance__Z(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__Z(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__Z(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__ZL
SEXP Covariance__ZL(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__ZL(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__ZL(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__LZWZL
SEXP Covariance__LZWZL(SEXP xp, SEXP w_, int type_);
RcppExport SEXP _glmmrBase_Covariance__LZWZL(SEXP xpSEXP, SEXP w_SEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__LZWZL(xp, w_, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__Update_parameters
void Covariance__Update_parameters(SEXP xp, SEXP parameters_, int type_);
RcppExport SEXP _glmmrBase_Covariance__Update_parameters(SEXP xpSEXP, SEXP parameters_SEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type parameters_(parameters_SEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    Covariance__Update_parameters(xp, parameters_, type_);
    return R_NilValue;
END_RCPP
}
// Covariance__D
SEXP Covariance__D(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__D(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__D(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__D_chol
SEXP Covariance__D_chol(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__D_chol(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__D_chol(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__B
SEXP Covariance__B(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__B(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__B(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__Q
SEXP Covariance__Q(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__Q(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__Q(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__log_likelihood
SEXP Covariance__log_likelihood(SEXP xp, SEXP u_, int type_);
RcppExport SEXP _glmmrBase_Covariance__log_likelihood(SEXP xpSEXP, SEXP u_SEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type u_(u_SEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__log_likelihood(xp, u_, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__log_determinant
SEXP Covariance__log_determinant(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__log_determinant(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__log_determinant(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__n_cov_pars
SEXP Covariance__n_cov_pars(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__n_cov_pars(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__n_cov_pars(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__simulate_re
SEXP Covariance__simulate_re(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__simulate_re(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__simulate_re(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__make_sparse
void Covariance__make_sparse(SEXP xp, bool amd, int type_);
RcppExport SEXP _glmmrBase_Covariance__make_sparse(SEXP xpSEXP, SEXP amdSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type amd(amdSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    Covariance__make_sparse(xp, amd, type_);
    return R_NilValue;
END_RCPP
}
// Covariance__make_dense
void Covariance__make_dense(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__make_dense(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    Covariance__make_dense(xp, type_);
    return R_NilValue;
END_RCPP
}
// Covariance__set_nn
void Covariance__set_nn(SEXP xp, int nn);
RcppExport SEXP _glmmrBase_Covariance__set_nn(SEXP xpSEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Covariance__set_nn(xp, nn);
    return R_NilValue;
END_RCPP
}
// Covariance__any_gr
SEXP Covariance__any_gr(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__any_gr(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__any_gr(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__get_val
SEXP Covariance__get_val(SEXP xp, int i, int j, int type_);
RcppExport SEXP _glmmrBase_Covariance__get_val(SEXP xpSEXP, SEXP iSEXP, SEXP jSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__get_val(xp, i, j, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__parameter_fn_index
SEXP Covariance__parameter_fn_index(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__parameter_fn_index(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__parameter_fn_index(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__re_terms
SEXP Covariance__re_terms(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__re_terms(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__re_terms(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__re_count
SEXP Covariance__re_count(SEXP xp, int type_);
RcppExport SEXP _glmmrBase_Covariance__re_count(SEXP xpSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__re_count(xp, type_));
    return rcpp_result_gen;
END_RCPP
}
// Linpred__new
SEXP Linpred__new(SEXP formula_, SEXP data_, SEXP colnames_);
RcppExport SEXP _glmmrBase_Linpred__new(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    rcpp_result_gen = Rcpp::wrap(Linpred__new(formula_, data_, colnames_));
    return rcpp_result_gen;
END_RCPP
}
// Linpred__update_pars
void Linpred__update_pars(SEXP xp, SEXP parameters_);
RcppExport SEXP _glmmrBase_Linpred__update_pars(SEXP xpSEXP, SEXP parameters_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type parameters_(parameters_SEXP);
    Linpred__update_pars(xp, parameters_);
    return R_NilValue;
END_RCPP
}
// Linpred__xb
SEXP Linpred__xb(SEXP xp);
RcppExport SEXP _glmmrBase_Linpred__xb(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Linpred__xb(xp));
    return rcpp_result_gen;
END_RCPP
}
// Linpred__x
SEXP Linpred__x(SEXP xp);
RcppExport SEXP _glmmrBase_Linpred__x(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Linpred__x(xp));
    return rcpp_result_gen;
END_RCPP
}
// Linpred__beta_names
SEXP Linpred__beta_names(SEXP xp);
RcppExport SEXP _glmmrBase_Linpred__beta_names(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Linpred__beta_names(xp));
    return rcpp_result_gen;
END_RCPP
}
// Linpred__any_nonlinear
SEXP Linpred__any_nonlinear(SEXP xp);
RcppExport SEXP _glmmrBase_Linpred__any_nonlinear(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Linpred__any_nonlinear(xp));
    return rcpp_result_gen;
END_RCPP
}
// ModelBits__new
SEXP ModelBits__new(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_, SEXP beta_, SEXP theta_);
RcppExport SEXP _glmmrBase_ModelBits__new(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP, SEXP beta_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    rcpp_result_gen = Rcpp::wrap(ModelBits__new(formula_, data_, colnames_, family_, link_, beta_, theta_));
    return rcpp_result_gen;
END_RCPP
}
// ModelBits__update_beta
void ModelBits__update_beta(SEXP xp, SEXP beta_);
RcppExport SEXP _glmmrBase_ModelBits__update_beta(SEXP xpSEXP, SEXP beta_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    ModelBits__update_beta(xp, beta_);
    return R_NilValue;
END_RCPP
}
// ModelBits__update_theta
void ModelBits__update_theta(SEXP xp, SEXP theta_);
RcppExport SEXP _glmmrBase_ModelBits__update_theta(SEXP xpSEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    ModelBits__update_theta(xp, theta_);
    return R_NilValue;
END_RCPP
}
// Model__new_w_pars
SEXP Model__new_w_pars(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_, SEXP beta_, SEXP theta_);
RcppExport SEXP _glmmrBase_Model__new_w_pars(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP, SEXP beta_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    rcpp_result_gen = Rcpp::wrap(Model__new_w_pars(formula_, data_, colnames_, family_, link_, beta_, theta_));
    return rcpp_result_gen;
END_RCPP
}
// Model__new
SEXP Model__new(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_);
RcppExport SEXP _glmmrBase_Model__new(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    rcpp_result_gen = Rcpp::wrap(Model__new(formula_, data_, colnames_, family_, link_));
    return rcpp_result_gen;
END_RCPP
}
// Model_nngp__new
SEXP Model_nngp__new(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_);
RcppExport SEXP _glmmrBase_Model_nngp__new(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    rcpp_result_gen = Rcpp::wrap(Model_nngp__new(formula_, data_, colnames_, family_, link_));
    return rcpp_result_gen;
END_RCPP
}
// Model_nngp__new_w_pars
SEXP Model_nngp__new_w_pars(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_, SEXP beta_, SEXP theta_, int nn);
RcppExport SEXP _glmmrBase_Model_nngp__new_w_pars(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP, SEXP beta_SEXP, SEXP theta_SEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_nngp__new_w_pars(formula_, data_, colnames_, family_, link_, beta_, theta_, nn));
    return rcpp_result_gen;
END_RCPP
}
// Model_hsgp__new
SEXP Model_hsgp__new(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_);
RcppExport SEXP _glmmrBase_Model_hsgp__new(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    rcpp_result_gen = Rcpp::wrap(Model_hsgp__new(formula_, data_, colnames_, family_, link_));
    return rcpp_result_gen;
END_RCPP
}
// Model_hsgp__new_w_pars
SEXP Model_hsgp__new_w_pars(SEXP formula_, SEXP data_, SEXP colnames_, SEXP family_, SEXP link_, SEXP beta_, SEXP theta_);
RcppExport SEXP _glmmrBase_Model_hsgp__new_w_pars(SEXP formula_SEXP, SEXP data_SEXP, SEXP colnames_SEXP, SEXP family_SEXP, SEXP link_SEXP, SEXP beta_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type formula_(formula_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type family_(family_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type link_(link_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    rcpp_result_gen = Rcpp::wrap(Model_hsgp__new_w_pars(formula_, data_, colnames_, family_, link_, beta_, theta_));
    return rcpp_result_gen;
END_RCPP
}
// Model__set_y
void Model__set_y(SEXP xp, SEXP y_, int type);
RcppExport SEXP _glmmrBase_Model__set_y(SEXP xpSEXP, SEXP y_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_y(xp, y_, type);
    return R_NilValue;
END_RCPP
}
// Model__set_offset
void Model__set_offset(SEXP xp, SEXP offset_, int type);
RcppExport SEXP _glmmrBase_Model__set_offset(SEXP xpSEXP, SEXP offset_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type offset_(offset_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_offset(xp, offset_, type);
    return R_NilValue;
END_RCPP
}
// Model__set_weights
void Model__set_weights(SEXP xp, SEXP weights_, int type);
RcppExport SEXP _glmmrBase_Model__set_weights(SEXP xpSEXP, SEXP weights_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type weights_(weights_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_weights(xp, weights_, type);
    return R_NilValue;
END_RCPP
}
// Model__P
SEXP Model__P(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__P(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__P(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__Q
SEXP Model__Q(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__Q(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__Q(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__theta_size
SEXP Model__theta_size(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__theta_size(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__theta_size(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__update_beta
void Model__update_beta(SEXP xp, SEXP beta_, int type);
RcppExport SEXP _glmmrBase_Model__update_beta(SEXP xpSEXP, SEXP beta_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__update_beta(xp, beta_, type);
    return R_NilValue;
END_RCPP
}
// Model__update_theta
void Model__update_theta(SEXP xp, SEXP theta_, int type);
RcppExport SEXP _glmmrBase_Model__update_theta(SEXP xpSEXP, SEXP theta_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type theta_(theta_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__update_theta(xp, theta_, type);
    return R_NilValue;
END_RCPP
}
// Model__update_u
void Model__update_u(SEXP xp, SEXP u_, bool append, int type);
RcppExport SEXP _glmmrBase_Model__update_u(SEXP xpSEXP, SEXP u_SEXP, SEXP appendSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type u_(u_SEXP);
    Rcpp::traits::input_parameter< bool >::type append(appendSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__update_u(xp, u_, append, type);
    return R_NilValue;
END_RCPP
}
// Model__use_attenuation
void Model__use_attenuation(SEXP xp, SEXP use_, int type);
RcppExport SEXP _glmmrBase_Model__use_attenuation(SEXP xpSEXP, SEXP use_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type use_(use_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__use_attenuation(xp, use_, type);
    return R_NilValue;
END_RCPP
}
// Model__update_W
void Model__update_W(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__update_W(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__update_W(xp, type);
    return R_NilValue;
END_RCPP
}
// Model__get_W
SEXP Model__get_W(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_W(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_W(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__set_direct_control
void Model__set_direct_control(SEXP xp, bool direct, double direct_range_beta, int max_iter, double epsilon, bool select_one, bool trisect_once, int max_eval, bool mrdirect, int type);
RcppExport SEXP _glmmrBase_Model__set_direct_control(SEXP xpSEXP, SEXP directSEXP, SEXP direct_range_betaSEXP, SEXP max_iterSEXP, SEXP epsilonSEXP, SEXP select_oneSEXP, SEXP trisect_onceSEXP, SEXP max_evalSEXP, SEXP mrdirectSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type direct(directSEXP);
    Rcpp::traits::input_parameter< double >::type direct_range_beta(direct_range_betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< bool >::type select_one(select_oneSEXP);
    Rcpp::traits::input_parameter< bool >::type trisect_once(trisect_onceSEXP);
    Rcpp::traits::input_parameter< int >::type max_eval(max_evalSEXP);
    Rcpp::traits::input_parameter< bool >::type mrdirect(mrdirectSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_direct_control(xp, direct, direct_range_beta, max_iter, epsilon, select_one, trisect_once, max_eval, mrdirect, type);
    return R_NilValue;
END_RCPP
}
// Model__set_lbfgs_control
void Model__set_lbfgs_control(SEXP xp, double g_epsilon, int past, double delta, int max_linesearch, int type);
RcppExport SEXP _glmmrBase_Model__set_lbfgs_control(SEXP xpSEXP, SEXP g_epsilonSEXP, SEXP pastSEXP, SEXP deltaSEXP, SEXP max_linesearchSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< double >::type g_epsilon(g_epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type past(pastSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type max_linesearch(max_linesearchSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_lbfgs_control(xp, g_epsilon, past, delta, max_linesearch, type);
    return R_NilValue;
END_RCPP
}
// Model__set_bound
void Model__set_bound(SEXP xp, SEXP bound_, bool beta, bool lower, int type);
RcppExport SEXP _glmmrBase_Model__set_bound(SEXP xpSEXP, SEXP bound_SEXP, SEXP betaSEXP, SEXP lowerSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type bound_(bound_SEXP);
    Rcpp::traits::input_parameter< bool >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_bound(xp, bound_, beta, lower, type);
    return R_NilValue;
END_RCPP
}
// Model__print_instructions
void Model__print_instructions(SEXP xp, bool linpred, bool loglik, int type);
RcppExport SEXP _glmmrBase_Model__print_instructions(SEXP xpSEXP, SEXP linpredSEXP, SEXP loglikSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type linpred(linpredSEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__print_instructions(xp, linpred, loglik, type);
    return R_NilValue;
END_RCPP
}
// Model__log_prob
SEXP Model__log_prob(SEXP xp, SEXP v_, int type);
RcppExport SEXP _glmmrBase_Model__log_prob(SEXP xpSEXP, SEXP v_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_(v_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__log_prob(xp, v_, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__set_bobyqa_control
void Model__set_bobyqa_control(SEXP xp, SEXP npt_, SEXP rhobeg_, SEXP rhoend_, int type);
RcppExport SEXP _glmmrBase_Model__set_bobyqa_control(SEXP xpSEXP, SEXP npt_SEXP, SEXP rhobeg_SEXP, SEXP rhoend_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type npt_(npt_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type rhobeg_(rhobeg_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type rhoend_(rhoend_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_bobyqa_control(xp, npt_, rhobeg_, rhoend_, type);
    return R_NilValue;
END_RCPP
}
// Model__log_gradient
SEXP Model__log_gradient(SEXP xp, SEXP v_, SEXP beta_, int type);
RcppExport SEXP _glmmrBase_Model__log_gradient(SEXP xpSEXP, SEXP v_SEXP, SEXP beta_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_(v_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type beta_(beta_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__log_gradient(xp, v_, beta_, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__linear_predictor
SEXP Model__linear_predictor(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__linear_predictor(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__linear_predictor(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__log_likelihood
SEXP Model__log_likelihood(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__log_likelihood(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__log_likelihood(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__cov_set_nn
void Model__cov_set_nn(SEXP xp, int nn);
RcppExport SEXP _glmmrBase_Model__cov_set_nn(SEXP xpSEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Model__cov_set_nn(xp, nn);
    return R_NilValue;
END_RCPP
}
// Model__test_lbfgs
void Model__test_lbfgs(SEXP xp, SEXP x);
RcppExport SEXP _glmmrBase_Model__test_lbfgs(SEXP xpSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Model__test_lbfgs(xp, x);
    return R_NilValue;
END_RCPP
}
// Model__test_lbfgs_theta
void Model__test_lbfgs_theta(SEXP xp, SEXP x);
RcppExport SEXP _glmmrBase_Model__test_lbfgs_theta(SEXP xpSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Model__test_lbfgs_theta(xp, x);
    return R_NilValue;
END_RCPP
}
// Model__test_lbfgs_laplace
void Model__test_lbfgs_laplace(SEXP xp, SEXP x);
RcppExport SEXP _glmmrBase_Model__test_lbfgs_laplace(SEXP xpSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Model__test_lbfgs_laplace(xp, x);
    return R_NilValue;
END_RCPP
}
// Model__ml_beta
void Model__ml_beta(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__ml_beta(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__ml_beta(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__ml_theta
void Model__ml_theta(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__ml_theta(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__ml_theta(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__ml_all
void Model__ml_all(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__ml_all(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__ml_all(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__laplace_ml_beta_u
void Model__laplace_ml_beta_u(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__laplace_ml_beta_u(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__laplace_ml_beta_u(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__laplace_ml_theta
void Model__laplace_ml_theta(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__laplace_ml_theta(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__laplace_ml_theta(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__laplace_ml_beta_theta
void Model__laplace_ml_beta_theta(SEXP xp, int algo, int type);
RcppExport SEXP _glmmrBase_Model__laplace_ml_beta_theta(SEXP xpSEXP, SEXP algoSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__laplace_ml_beta_theta(xp, algo, type);
    return R_NilValue;
END_RCPP
}
// Model__nr_beta
void Model__nr_beta(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__nr_beta(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__nr_beta(xp, type);
    return R_NilValue;
END_RCPP
}
// Model__laplace_nr_beta_u
void Model__laplace_nr_beta_u(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__laplace_nr_beta_u(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__laplace_nr_beta_u(xp, type);
    return R_NilValue;
END_RCPP
}
// Model__Sigma
SEXP Model__Sigma(SEXP xp, bool inverse, int type);
RcppExport SEXP _glmmrBase_Model__Sigma(SEXP xpSEXP, SEXP inverseSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__Sigma(xp, inverse, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__information_matrix
SEXP Model__information_matrix(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__information_matrix(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__information_matrix(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__D
SEXP Model__D(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__D(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__D(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__D_chol
SEXP Model__D_chol(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__D_chol(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__D_chol(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__u_log_likelihood
SEXP Model__u_log_likelihood(SEXP xp, SEXP u_, int type);
RcppExport SEXP _glmmrBase_Model__u_log_likelihood(SEXP xpSEXP, SEXP u_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type u_(u_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__u_log_likelihood(xp, u_, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__simulate_re
SEXP Model__simulate_re(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__simulate_re(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__simulate_re(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__re_terms
SEXP Model__re_terms(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__re_terms(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__re_terms(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__re_count
SEXP Model__re_count(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__re_count(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__re_count(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__parameter_fn_index
SEXP Model__parameter_fn_index(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__parameter_fn_index(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__parameter_fn_index(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__information_matrix_crude
SEXP Model__information_matrix_crude(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__information_matrix_crude(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__information_matrix_crude(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__obs_information_matrix
SEXP Model__obs_information_matrix(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__obs_information_matrix(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__obs_information_matrix(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__u
SEXP Model__u(SEXP xp, bool scaled_, int type);
RcppExport SEXP _glmmrBase_Model__u(SEXP xpSEXP, SEXP scaled_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type scaled_(scaled_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__u(xp, scaled_, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__Zu
SEXP Model__Zu(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__Zu(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__Zu(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__X
SEXP Model__X(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__X(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__X(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__mcmc_sample
void Model__mcmc_sample(SEXP xp, SEXP warmup_, SEXP samples_, SEXP adapt_, int type);
RcppExport SEXP _glmmrBase_Model__mcmc_sample(SEXP xpSEXP, SEXP warmup_SEXP, SEXP samples_SEXP, SEXP adapt_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type warmup_(warmup_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type samples_(samples_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type adapt_(adapt_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__mcmc_sample(xp, warmup_, samples_, adapt_, type);
    return R_NilValue;
END_RCPP
}
// Model__set_trace
void Model__set_trace(SEXP xp, SEXP trace_, int type);
RcppExport SEXP _glmmrBase_Model__set_trace(SEXP xpSEXP, SEXP trace_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type trace_(trace_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_trace(xp, trace_, type);
    return R_NilValue;
END_RCPP
}
// Model__get_beta
SEXP Model__get_beta(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_beta(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_beta(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__y
SEXP Model__y(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__y(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__y(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__get_theta
SEXP Model__get_theta(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_theta(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_theta(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__get_var_par
SEXP Model__get_var_par(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_var_par(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_var_par(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__get_variance
SEXP Model__get_variance(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_variance(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_variance(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__set_var_par
void Model__set_var_par(SEXP xp, SEXP var_par_, int type);
RcppExport SEXP _glmmrBase_Model__set_var_par(SEXP xpSEXP, SEXP var_par_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type var_par_(var_par_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_var_par(xp, var_par_, type);
    return R_NilValue;
END_RCPP
}
// Model__set_trials
void Model__set_trials(SEXP xp, SEXP trials, int type);
RcppExport SEXP _glmmrBase_Model__set_trials(SEXP xpSEXP, SEXP trialsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type trials(trialsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__set_trials(xp, trials, type);
    return R_NilValue;
END_RCPP
}
// Model__L
SEXP Model__L(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__L(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__L(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__ZL
SEXP Model__ZL(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__ZL(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__ZL(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__xb
SEXP Model__xb(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__xb(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__xb(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__submatrix
SEXP Covariance__submatrix(SEXP xp, int i);
RcppExport SEXP _glmmrBase_Covariance__submatrix(SEXP xpSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__submatrix(xp, i));
    return rcpp_result_gen;
END_RCPP
}
// Model_hsgp__set_approx_pars
void Model_hsgp__set_approx_pars(SEXP xp, SEXP m_, SEXP L_);
RcppExport SEXP _glmmrBase_Model_hsgp__set_approx_pars(SEXP xpSEXP, SEXP m_SEXP, SEXP L_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m_(m_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type L_(L_SEXP);
    Model_hsgp__set_approx_pars(xp, m_, L_);
    return R_NilValue;
END_RCPP
}
// Covariance_hsgp__set_approx_pars
void Covariance_hsgp__set_approx_pars(SEXP xp, SEXP m_, SEXP L_);
RcppExport SEXP _glmmrBase_Covariance_hsgp__set_approx_pars(SEXP xpSEXP, SEXP m_SEXP, SEXP L_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type m_(m_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type L_(L_SEXP);
    Covariance_hsgp__set_approx_pars(xp, m_, L_);
    return R_NilValue;
END_RCPP
}
// Model_hsgp__dim
SEXP Model_hsgp__dim(SEXP xp);
RcppExport SEXP _glmmrBase_Model_hsgp__dim(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Model_hsgp__dim(xp));
    return rcpp_result_gen;
END_RCPP
}
// Model__aic
SEXP Model__aic(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__aic(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__aic(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__get_log_likelihood_values
SEXP Model__get_log_likelihood_values(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_log_likelihood_values(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_log_likelihood_values(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__u_diagnostic
SEXP Model__u_diagnostic(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__u_diagnostic(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__u_diagnostic(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__marginal
SEXP Model__marginal(SEXP xp, std::string x, int margin, int re, int se, Nullable<std::vector<std::string> > at, Nullable<std::vector<std::string> > atmeans, Nullable<std::vector<std::string> > average, double xvals_first, double xvals_second, Nullable<std::vector<double> > atvals, Nullable<std::vector<double> > revals, int type);
RcppExport SEXP _glmmrBase_Model__marginal(SEXP xpSEXP, SEXP xSEXP, SEXP marginSEXP, SEXP reSEXP, SEXP seSEXP, SEXP atSEXP, SEXP atmeansSEXP, SEXP averageSEXP, SEXP xvals_firstSEXP, SEXP xvals_secondSEXP, SEXP atvalsSEXP, SEXP revalsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type margin(marginSEXP);
    Rcpp::traits::input_parameter< int >::type re(reSEXP);
    Rcpp::traits::input_parameter< int >::type se(seSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<std::string> > >::type at(atSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<std::string> > >::type atmeans(atmeansSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<std::string> > >::type average(averageSEXP);
    Rcpp::traits::input_parameter< double >::type xvals_first(xvals_firstSEXP);
    Rcpp::traits::input_parameter< double >::type xvals_second(xvals_secondSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<double> > >::type atvals(atvalsSEXP);
    Rcpp::traits::input_parameter< Nullable<std::vector<double> > >::type revals(revalsSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__marginal(xp, x, margin, re, se, at, atmeans, average, xvals_first, xvals_second, atvals, revals, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__mcmc_set_lambda
void Model__mcmc_set_lambda(SEXP xp, SEXP lambda_, int type);
RcppExport SEXP _glmmrBase_Model__mcmc_set_lambda(SEXP xpSEXP, SEXP lambda_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type lambda_(lambda_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__mcmc_set_lambda(xp, lambda_, type);
    return R_NilValue;
END_RCPP
}
// Model__reset_fn_counter
void Model__reset_fn_counter(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__reset_fn_counter(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__reset_fn_counter(xp, type);
    return R_NilValue;
END_RCPP
}
// Model__get_fn_counter
SEXP Model__get_fn_counter(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__get_fn_counter(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__get_fn_counter(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__print_names
void Model__print_names(SEXP xp, bool data, bool parameters, int type);
RcppExport SEXP _glmmrBase_Model__print_names(SEXP xpSEXP, SEXP dataSEXP, SEXP parametersSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type data(dataSEXP);
    Rcpp::traits::input_parameter< bool >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__print_names(xp, data, parameters, type);
    return R_NilValue;
END_RCPP
}
// Model__mcmc_set_max_steps
void Model__mcmc_set_max_steps(SEXP xp, SEXP max_steps_, int type);
RcppExport SEXP _glmmrBase_Model__mcmc_set_max_steps(SEXP xpSEXP, SEXP max_steps_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type max_steps_(max_steps_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__mcmc_set_max_steps(xp, max_steps_, type);
    return R_NilValue;
END_RCPP
}
// Model__saem
void Model__saem(SEXP xp, bool saem_, int block_size, double alpha, bool pr_average, int type);
RcppExport SEXP _glmmrBase_Model__saem(SEXP xpSEXP, SEXP saem_SEXP, SEXP block_sizeSEXP, SEXP alphaSEXP, SEXP pr_averageSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type saem_(saem_SEXP);
    Rcpp::traits::input_parameter< int >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type pr_average(pr_averageSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__saem(xp, saem_, block_size, alpha, pr_average, type);
    return R_NilValue;
END_RCPP
}
// Model__ll_diff_variance
SEXP Model__ll_diff_variance(SEXP xp, bool beta, bool theta, int type);
RcppExport SEXP _glmmrBase_Model__ll_diff_variance(SEXP xpSEXP, SEXP betaSEXP, SEXP thetaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__ll_diff_variance(xp, beta, theta, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__mcmc_set_refresh
void Model__mcmc_set_refresh(SEXP xp, SEXP refresh_, int type);
RcppExport SEXP _glmmrBase_Model__mcmc_set_refresh(SEXP xpSEXP, SEXP refresh_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type refresh_(refresh_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__mcmc_set_refresh(xp, refresh_, type);
    return R_NilValue;
END_RCPP
}
// Model__mcmc_set_target_accept
void Model__mcmc_set_target_accept(SEXP xp, SEXP target_, int type);
RcppExport SEXP _glmmrBase_Model__mcmc_set_target_accept(SEXP xpSEXP, SEXP target_SEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type target_(target_SEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__mcmc_set_target_accept(xp, target_, type);
    return R_NilValue;
END_RCPP
}
// Model__make_sparse
void Model__make_sparse(SEXP xp, bool amd, int type);
RcppExport SEXP _glmmrBase_Model__make_sparse(SEXP xpSEXP, SEXP amdSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< bool >::type amd(amdSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__make_sparse(xp, amd, type);
    return R_NilValue;
END_RCPP
}
// Model__make_dense
void Model__make_dense(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__make_dense(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Model__make_dense(xp, type);
    return R_NilValue;
END_RCPP
}
// Model__beta_parameter_names
SEXP Model__beta_parameter_names(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__beta_parameter_names(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__beta_parameter_names(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__theta_parameter_names
SEXP Model__theta_parameter_names(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__theta_parameter_names(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__theta_parameter_names(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__hess_and_grad
SEXP Model__hess_and_grad(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__hess_and_grad(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__hess_and_grad(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__sandwich
SEXP Model__sandwich(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__sandwich(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__sandwich(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__infomat_theta
SEXP Model__infomat_theta(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__infomat_theta(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__infomat_theta(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__kenward_roger
SEXP Model__kenward_roger(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__kenward_roger(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__kenward_roger(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__small_sample_correction
SEXP Model__small_sample_correction(SEXP xp, int ss_type, int type);
RcppExport SEXP _glmmrBase_Model__small_sample_correction(SEXP xpSEXP, SEXP ss_typeSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type ss_type(ss_typeSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__small_sample_correction(xp, ss_type, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__box
SEXP Model__box(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__box(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__box(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__cov_deriv
SEXP Model__cov_deriv(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__cov_deriv(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__cov_deriv(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__hessian
SEXP Model__hessian(SEXP xp, int type);
RcppExport SEXP _glmmrBase_Model__hessian(SEXP xpSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__hessian(xp, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__predict
SEXP Model__predict(SEXP xp, SEXP newdata_, SEXP newoffset_, int m, int type);
RcppExport SEXP _glmmrBase_Model__predict(SEXP xpSEXP, SEXP newdata_SEXP, SEXP newoffset_SEXP, SEXP mSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata_(newdata_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type newoffset_(newoffset_SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__predict(xp, newdata_, newoffset_, m, type));
    return rcpp_result_gen;
END_RCPP
}
// Model__predict_re
SEXP Model__predict_re(SEXP xp, SEXP newdata_, SEXP newoffset_, int m, int type);
RcppExport SEXP _glmmrBase_Model__predict_re(SEXP xpSEXP, SEXP newdata_SEXP, SEXP newoffset_SEXP, SEXP mSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type newdata_(newdata_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type newoffset_(newoffset_SEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(Model__predict_re(xp, newdata_, newoffset_, m, type));
    return rcpp_result_gen;
END_RCPP
}
// setParallel
void setParallel(SEXP parallel_, int cores_);
RcppExport SEXP _glmmrBase_setParallel(SEXP parallel_SEXP, SEXP cores_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type parallel_(parallel_SEXP);
    Rcpp::traits::input_parameter< int >::type cores_(cores_SEXP);
    setParallel(parallel_, cores_);
    return R_NilValue;
END_RCPP
}
// re_names
std::vector<std::string> re_names(const std::string& formula);
RcppExport SEXP _glmmrBase_re_names(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(re_names(formula));
    return rcpp_result_gen;
END_RCPP
}
// attenuate_xb
Eigen::VectorXd attenuate_xb(const Eigen::VectorXd& xb, const Eigen::MatrixXd& Z, const Eigen::MatrixXd& D, const std::string& link);
RcppExport SEXP _glmmrBase_attenuate_xb(SEXP xbSEXP, SEXP ZSEXP, SEXP DSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(attenuate_xb(xb, Z, D, link));
    return rcpp_result_gen;
END_RCPP
}
// dlinkdeta
Eigen::VectorXd dlinkdeta(const Eigen::VectorXd& xb, const std::string& link);
RcppExport SEXP _glmmrBase_dlinkdeta(SEXP xbSEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(dlinkdeta(xb, link));
    return rcpp_result_gen;
END_RCPP
}
// girling_algorithm
SEXP girling_algorithm(SEXP xp, SEXP N_, SEXP C_, SEXP tol_);
RcppExport SEXP _glmmrBase_girling_algorithm(SEXP xpSEXP, SEXP N_SEXP, SEXP C_SEXP, SEXP tol_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type N_(N_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type C_(C_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type tol_(tol_SEXP);
    rcpp_result_gen = Rcpp::wrap(girling_algorithm(xp, N_, C_, tol_));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_bernoulli_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_beta_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_binomial_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_gamma_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_gaussian_mod();
RcppExport SEXP _rcpp_module_boot_stan_fit4mcml_poisson_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_glmmrBase_Covariance__new", (DL_FUNC) &_glmmrBase_Covariance__new, 3},
    {"_glmmrBase_Covariance_nngp__new", (DL_FUNC) &_glmmrBase_Covariance_nngp__new, 3},
    {"_glmmrBase_Covariance_hsgp__new", (DL_FUNC) &_glmmrBase_Covariance_hsgp__new, 3},
    {"_glmmrBase_Covariance__Z", (DL_FUNC) &_glmmrBase_Covariance__Z, 2},
    {"_glmmrBase_Covariance__ZL", (DL_FUNC) &_glmmrBase_Covariance__ZL, 2},
    {"_glmmrBase_Covariance__LZWZL", (DL_FUNC) &_glmmrBase_Covariance__LZWZL, 3},
    {"_glmmrBase_Covariance__Update_parameters", (DL_FUNC) &_glmmrBase_Covariance__Update_parameters, 3},
    {"_glmmrBase_Covariance__D", (DL_FUNC) &_glmmrBase_Covariance__D, 2},
    {"_glmmrBase_Covariance__D_chol", (DL_FUNC) &_glmmrBase_Covariance__D_chol, 2},
    {"_glmmrBase_Covariance__B", (DL_FUNC) &_glmmrBase_Covariance__B, 2},
    {"_glmmrBase_Covariance__Q", (DL_FUNC) &_glmmrBase_Covariance__Q, 2},
    {"_glmmrBase_Covariance__log_likelihood", (DL_FUNC) &_glmmrBase_Covariance__log_likelihood, 3},
    {"_glmmrBase_Covariance__log_determinant", (DL_FUNC) &_glmmrBase_Covariance__log_determinant, 2},
    {"_glmmrBase_Covariance__n_cov_pars", (DL_FUNC) &_glmmrBase_Covariance__n_cov_pars, 2},
    {"_glmmrBase_Covariance__simulate_re", (DL_FUNC) &_glmmrBase_Covariance__simulate_re, 2},
    {"_glmmrBase_Covariance__make_sparse", (DL_FUNC) &_glmmrBase_Covariance__make_sparse, 3},
    {"_glmmrBase_Covariance__make_dense", (DL_FUNC) &_glmmrBase_Covariance__make_dense, 2},
    {"_glmmrBase_Covariance__set_nn", (DL_FUNC) &_glmmrBase_Covariance__set_nn, 2},
    {"_glmmrBase_Covariance__any_gr", (DL_FUNC) &_glmmrBase_Covariance__any_gr, 2},
    {"_glmmrBase_Covariance__get_val", (DL_FUNC) &_glmmrBase_Covariance__get_val, 4},
    {"_glmmrBase_Covariance__parameter_fn_index", (DL_FUNC) &_glmmrBase_Covariance__parameter_fn_index, 2},
    {"_glmmrBase_Covariance__re_terms", (DL_FUNC) &_glmmrBase_Covariance__re_terms, 2},
    {"_glmmrBase_Covariance__re_count", (DL_FUNC) &_glmmrBase_Covariance__re_count, 2},
    {"_glmmrBase_Linpred__new", (DL_FUNC) &_glmmrBase_Linpred__new, 3},
    {"_glmmrBase_Linpred__update_pars", (DL_FUNC) &_glmmrBase_Linpred__update_pars, 2},
    {"_glmmrBase_Linpred__xb", (DL_FUNC) &_glmmrBase_Linpred__xb, 1},
    {"_glmmrBase_Linpred__x", (DL_FUNC) &_glmmrBase_Linpred__x, 1},
    {"_glmmrBase_Linpred__beta_names", (DL_FUNC) &_glmmrBase_Linpred__beta_names, 1},
    {"_glmmrBase_Linpred__any_nonlinear", (DL_FUNC) &_glmmrBase_Linpred__any_nonlinear, 1},
    {"_glmmrBase_ModelBits__new", (DL_FUNC) &_glmmrBase_ModelBits__new, 7},
    {"_glmmrBase_ModelBits__update_beta", (DL_FUNC) &_glmmrBase_ModelBits__update_beta, 2},
    {"_glmmrBase_ModelBits__update_theta", (DL_FUNC) &_glmmrBase_ModelBits__update_theta, 2},
    {"_glmmrBase_Model__new_w_pars", (DL_FUNC) &_glmmrBase_Model__new_w_pars, 7},
    {"_glmmrBase_Model__new", (DL_FUNC) &_glmmrBase_Model__new, 5},
    {"_glmmrBase_Model_nngp__new", (DL_FUNC) &_glmmrBase_Model_nngp__new, 5},
    {"_glmmrBase_Model_nngp__new_w_pars", (DL_FUNC) &_glmmrBase_Model_nngp__new_w_pars, 8},
    {"_glmmrBase_Model_hsgp__new", (DL_FUNC) &_glmmrBase_Model_hsgp__new, 5},
    {"_glmmrBase_Model_hsgp__new_w_pars", (DL_FUNC) &_glmmrBase_Model_hsgp__new_w_pars, 7},
    {"_glmmrBase_Model__set_y", (DL_FUNC) &_glmmrBase_Model__set_y, 3},
    {"_glmmrBase_Model__set_offset", (DL_FUNC) &_glmmrBase_Model__set_offset, 3},
    {"_glmmrBase_Model__set_weights", (DL_FUNC) &_glmmrBase_Model__set_weights, 3},
    {"_glmmrBase_Model__P", (DL_FUNC) &_glmmrBase_Model__P, 2},
    {"_glmmrBase_Model__Q", (DL_FUNC) &_glmmrBase_Model__Q, 2},
    {"_glmmrBase_Model__theta_size", (DL_FUNC) &_glmmrBase_Model__theta_size, 2},
    {"_glmmrBase_Model__update_beta", (DL_FUNC) &_glmmrBase_Model__update_beta, 3},
    {"_glmmrBase_Model__update_theta", (DL_FUNC) &_glmmrBase_Model__update_theta, 3},
    {"_glmmrBase_Model__update_u", (DL_FUNC) &_glmmrBase_Model__update_u, 4},
    {"_glmmrBase_Model__use_attenuation", (DL_FUNC) &_glmmrBase_Model__use_attenuation, 3},
    {"_glmmrBase_Model__update_W", (DL_FUNC) &_glmmrBase_Model__update_W, 2},
    {"_glmmrBase_Model__get_W", (DL_FUNC) &_glmmrBase_Model__get_W, 2},
    {"_glmmrBase_Model__set_direct_control", (DL_FUNC) &_glmmrBase_Model__set_direct_control, 10},
    {"_glmmrBase_Model__set_lbfgs_control", (DL_FUNC) &_glmmrBase_Model__set_lbfgs_control, 6},
    {"_glmmrBase_Model__set_bound", (DL_FUNC) &_glmmrBase_Model__set_bound, 5},
    {"_glmmrBase_Model__print_instructions", (DL_FUNC) &_glmmrBase_Model__print_instructions, 4},
    {"_glmmrBase_Model__log_prob", (DL_FUNC) &_glmmrBase_Model__log_prob, 3},
    {"_glmmrBase_Model__set_bobyqa_control", (DL_FUNC) &_glmmrBase_Model__set_bobyqa_control, 5},
    {"_glmmrBase_Model__log_gradient", (DL_FUNC) &_glmmrBase_Model__log_gradient, 4},
    {"_glmmrBase_Model__linear_predictor", (DL_FUNC) &_glmmrBase_Model__linear_predictor, 2},
    {"_glmmrBase_Model__log_likelihood", (DL_FUNC) &_glmmrBase_Model__log_likelihood, 2},
    {"_glmmrBase_Model__cov_set_nn", (DL_FUNC) &_glmmrBase_Model__cov_set_nn, 2},
    {"_glmmrBase_Model__test_lbfgs", (DL_FUNC) &_glmmrBase_Model__test_lbfgs, 2},
    {"_glmmrBase_Model__test_lbfgs_theta", (DL_FUNC) &_glmmrBase_Model__test_lbfgs_theta, 2},
    {"_glmmrBase_Model__test_lbfgs_laplace", (DL_FUNC) &_glmmrBase_Model__test_lbfgs_laplace, 2},
    {"_glmmrBase_Model__ml_beta", (DL_FUNC) &_glmmrBase_Model__ml_beta, 3},
    {"_glmmrBase_Model__ml_theta", (DL_FUNC) &_glmmrBase_Model__ml_theta, 3},
    {"_glmmrBase_Model__ml_all", (DL_FUNC) &_glmmrBase_Model__ml_all, 3},
    {"_glmmrBase_Model__laplace_ml_beta_u", (DL_FUNC) &_glmmrBase_Model__laplace_ml_beta_u, 3},
    {"_glmmrBase_Model__laplace_ml_theta", (DL_FUNC) &_glmmrBase_Model__laplace_ml_theta, 3},
    {"_glmmrBase_Model__laplace_ml_beta_theta", (DL_FUNC) &_glmmrBase_Model__laplace_ml_beta_theta, 3},
    {"_glmmrBase_Model__nr_beta", (DL_FUNC) &_glmmrBase_Model__nr_beta, 2},
    {"_glmmrBase_Model__laplace_nr_beta_u", (DL_FUNC) &_glmmrBase_Model__laplace_nr_beta_u, 2},
    {"_glmmrBase_Model__Sigma", (DL_FUNC) &_glmmrBase_Model__Sigma, 3},
    {"_glmmrBase_Model__information_matrix", (DL_FUNC) &_glmmrBase_Model__information_matrix, 2},
    {"_glmmrBase_Model__D", (DL_FUNC) &_glmmrBase_Model__D, 2},
    {"_glmmrBase_Model__D_chol", (DL_FUNC) &_glmmrBase_Model__D_chol, 2},
    {"_glmmrBase_Model__u_log_likelihood", (DL_FUNC) &_glmmrBase_Model__u_log_likelihood, 3},
    {"_glmmrBase_Model__simulate_re", (DL_FUNC) &_glmmrBase_Model__simulate_re, 2},
    {"_glmmrBase_Model__re_terms", (DL_FUNC) &_glmmrBase_Model__re_terms, 2},
    {"_glmmrBase_Model__re_count", (DL_FUNC) &_glmmrBase_Model__re_count, 2},
    {"_glmmrBase_Model__parameter_fn_index", (DL_FUNC) &_glmmrBase_Model__parameter_fn_index, 2},
    {"_glmmrBase_Model__information_matrix_crude", (DL_FUNC) &_glmmrBase_Model__information_matrix_crude, 2},
    {"_glmmrBase_Model__obs_information_matrix", (DL_FUNC) &_glmmrBase_Model__obs_information_matrix, 2},
    {"_glmmrBase_Model__u", (DL_FUNC) &_glmmrBase_Model__u, 3},
    {"_glmmrBase_Model__Zu", (DL_FUNC) &_glmmrBase_Model__Zu, 2},
    {"_glmmrBase_Model__X", (DL_FUNC) &_glmmrBase_Model__X, 2},
    {"_glmmrBase_Model__mcmc_sample", (DL_FUNC) &_glmmrBase_Model__mcmc_sample, 5},
    {"_glmmrBase_Model__set_trace", (DL_FUNC) &_glmmrBase_Model__set_trace, 3},
    {"_glmmrBase_Model__get_beta", (DL_FUNC) &_glmmrBase_Model__get_beta, 2},
    {"_glmmrBase_Model__y", (DL_FUNC) &_glmmrBase_Model__y, 2},
    {"_glmmrBase_Model__get_theta", (DL_FUNC) &_glmmrBase_Model__get_theta, 2},
    {"_glmmrBase_Model__get_var_par", (DL_FUNC) &_glmmrBase_Model__get_var_par, 2},
    {"_glmmrBase_Model__get_variance", (DL_FUNC) &_glmmrBase_Model__get_variance, 2},
    {"_glmmrBase_Model__set_var_par", (DL_FUNC) &_glmmrBase_Model__set_var_par, 3},
    {"_glmmrBase_Model__set_trials", (DL_FUNC) &_glmmrBase_Model__set_trials, 3},
    {"_glmmrBase_Model__L", (DL_FUNC) &_glmmrBase_Model__L, 2},
    {"_glmmrBase_Model__ZL", (DL_FUNC) &_glmmrBase_Model__ZL, 2},
    {"_glmmrBase_Model__xb", (DL_FUNC) &_glmmrBase_Model__xb, 2},
    {"_glmmrBase_Covariance__submatrix", (DL_FUNC) &_glmmrBase_Covariance__submatrix, 2},
    {"_glmmrBase_Model_hsgp__set_approx_pars", (DL_FUNC) &_glmmrBase_Model_hsgp__set_approx_pars, 3},
    {"_glmmrBase_Covariance_hsgp__set_approx_pars", (DL_FUNC) &_glmmrBase_Covariance_hsgp__set_approx_pars, 3},
    {"_glmmrBase_Model_hsgp__dim", (DL_FUNC) &_glmmrBase_Model_hsgp__dim, 1},
    {"_glmmrBase_Model__aic", (DL_FUNC) &_glmmrBase_Model__aic, 2},
    {"_glmmrBase_Model__get_log_likelihood_values", (DL_FUNC) &_glmmrBase_Model__get_log_likelihood_values, 2},
    {"_glmmrBase_Model__u_diagnostic", (DL_FUNC) &_glmmrBase_Model__u_diagnostic, 2},
    {"_glmmrBase_Model__marginal", (DL_FUNC) &_glmmrBase_Model__marginal, 13},
    {"_glmmrBase_Model__mcmc_set_lambda", (DL_FUNC) &_glmmrBase_Model__mcmc_set_lambda, 3},
    {"_glmmrBase_Model__reset_fn_counter", (DL_FUNC) &_glmmrBase_Model__reset_fn_counter, 2},
    {"_glmmrBase_Model__get_fn_counter", (DL_FUNC) &_glmmrBase_Model__get_fn_counter, 2},
    {"_glmmrBase_Model__print_names", (DL_FUNC) &_glmmrBase_Model__print_names, 4},
    {"_glmmrBase_Model__mcmc_set_max_steps", (DL_FUNC) &_glmmrBase_Model__mcmc_set_max_steps, 3},
    {"_glmmrBase_Model__saem", (DL_FUNC) &_glmmrBase_Model__saem, 6},
    {"_glmmrBase_Model__ll_diff_variance", (DL_FUNC) &_glmmrBase_Model__ll_diff_variance, 4},
    {"_glmmrBase_Model__mcmc_set_refresh", (DL_FUNC) &_glmmrBase_Model__mcmc_set_refresh, 3},
    {"_glmmrBase_Model__mcmc_set_target_accept", (DL_FUNC) &_glmmrBase_Model__mcmc_set_target_accept, 3},
    {"_glmmrBase_Model__make_sparse", (DL_FUNC) &_glmmrBase_Model__make_sparse, 3},
    {"_glmmrBase_Model__make_dense", (DL_FUNC) &_glmmrBase_Model__make_dense, 2},
    {"_glmmrBase_Model__beta_parameter_names", (DL_FUNC) &_glmmrBase_Model__beta_parameter_names, 2},
    {"_glmmrBase_Model__theta_parameter_names", (DL_FUNC) &_glmmrBase_Model__theta_parameter_names, 2},
    {"_glmmrBase_Model__hess_and_grad", (DL_FUNC) &_glmmrBase_Model__hess_and_grad, 2},
    {"_glmmrBase_Model__sandwich", (DL_FUNC) &_glmmrBase_Model__sandwich, 2},
    {"_glmmrBase_Model__infomat_theta", (DL_FUNC) &_glmmrBase_Model__infomat_theta, 2},
    {"_glmmrBase_Model__kenward_roger", (DL_FUNC) &_glmmrBase_Model__kenward_roger, 2},
    {"_glmmrBase_Model__small_sample_correction", (DL_FUNC) &_glmmrBase_Model__small_sample_correction, 3},
    {"_glmmrBase_Model__box", (DL_FUNC) &_glmmrBase_Model__box, 2},
    {"_glmmrBase_Model__cov_deriv", (DL_FUNC) &_glmmrBase_Model__cov_deriv, 2},
    {"_glmmrBase_Model__hessian", (DL_FUNC) &_glmmrBase_Model__hessian, 2},
    {"_glmmrBase_Model__predict", (DL_FUNC) &_glmmrBase_Model__predict, 5},
    {"_glmmrBase_Model__predict_re", (DL_FUNC) &_glmmrBase_Model__predict_re, 5},
    {"_glmmrBase_setParallel", (DL_FUNC) &_glmmrBase_setParallel, 2},
    {"_glmmrBase_re_names", (DL_FUNC) &_glmmrBase_re_names, 1},
    {"_glmmrBase_attenuate_xb", (DL_FUNC) &_glmmrBase_attenuate_xb, 4},
    {"_glmmrBase_dlinkdeta", (DL_FUNC) &_glmmrBase_dlinkdeta, 2},
    {"_glmmrBase_girling_algorithm", (DL_FUNC) &_glmmrBase_girling_algorithm, 4},
    {"_rcpp_module_boot_stan_fit4mcml_bernoulli_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_bernoulli_mod, 0},
    {"_rcpp_module_boot_stan_fit4mcml_beta_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_beta_mod, 0},
    {"_rcpp_module_boot_stan_fit4mcml_binomial_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_binomial_mod, 0},
    {"_rcpp_module_boot_stan_fit4mcml_gamma_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_gamma_mod, 0},
    {"_rcpp_module_boot_stan_fit4mcml_gaussian_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_gaussian_mod, 0},
    {"_rcpp_module_boot_stan_fit4mcml_poisson_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4mcml_poisson_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmrBase(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
