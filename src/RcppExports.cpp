// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// genD
arma::field<arma::mat> genD(Rcpp::List D_data, const arma::vec& gamma);
RcppExport SEXP _glmmrBase_genD(SEXP D_dataSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type D_data(D_dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(genD(D_data, gamma));
    return rcpp_result_gen;
END_RCPP
}
// genCholD
arma::field<arma::mat> genCholD(Rcpp::List D_data, const arma::vec& gamma);
RcppExport SEXP _glmmrBase_genCholD(SEXP D_dataSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type D_data(D_dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(genCholD(D_data, gamma));
    return rcpp_result_gen;
END_RCPP
}
// loglikD
double loglikD(Rcpp::List D_data, const arma::vec& gamma, const arma::vec& u);
RcppExport SEXP _glmmrBase_loglikD(SEXP D_dataSEXP, SEXP gammaSEXP, SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type D_data(D_dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(loglikD(D_data, gamma, u));
    return rcpp_result_gen;
END_RCPP
}
// gen_dhdmu
arma::vec gen_dhdmu(const arma::vec& xb, std::string family, std::string link);
RcppExport SEXP _glmmrBase_gen_dhdmu(SEXP xbSEXP, SEXP familySEXP, SEXP linkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< std::string >::type link(linkSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_dhdmu(xb, family, link));
    return rcpp_result_gen;
END_RCPP
}
// blockMat
arma::mat blockMat(arma::field<arma::mat> matfield);
RcppExport SEXP _glmmrBase_blockMat(SEXP matfieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type matfield(matfieldSEXP);
    rcpp_result_gen = Rcpp::wrap(blockMat(matfield));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmmrBase_genD", (DL_FUNC) &_glmmrBase_genD, 2},
    {"_glmmrBase_genCholD", (DL_FUNC) &_glmmrBase_genCholD, 2},
    {"_glmmrBase_loglikD", (DL_FUNC) &_glmmrBase_loglikD, 3},
    {"_glmmrBase_gen_dhdmu", (DL_FUNC) &_glmmrBase_gen_dhdmu, 3},
    {"_glmmrBase_blockMat", (DL_FUNC) &_glmmrBase_blockMat, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmrBase(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
