// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Covariance__new
SEXP Covariance__new(SEXP form_, SEXP data_, SEXP colnames_);
RcppExport SEXP _glmmrBase_Covariance__new(SEXP form_SEXP, SEXP data_SEXP, SEXP colnames_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type form_(form_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type data_(data_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_(colnames_SEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__new(form_, data_, colnames_));
    return rcpp_result_gen;
END_RCPP
}
// Covariance__Z
SEXP Covariance__Z(SEXP xp);
RcppExport SEXP _glmmrBase_Covariance__Z(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(Covariance__Z(xp));
    return rcpp_result_gen;
END_RCPP
}
// genX
Eigen::MatrixXd genX(const std::string& formula, const Eigen::ArrayXXd& data, const std::vector<std::string>& colnames);
RcppExport SEXP _glmmrBase_genX(SEXP formulaSEXP, SEXP dataSEXP, SEXP colnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type colnames(colnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(genX(formula, data, colnames));
    return rcpp_result_gen;
END_RCPP
}
// genQ
Eigen::MatrixXd genQ(const std::string& formula, const Eigen::ArrayXXd& data, const std::vector<std::string>& colnames, const std::vector<double>& parameters, bool chol);
RcppExport SEXP _glmmrBase_genQ(SEXP formulaSEXP, SEXP dataSEXP, SEXP colnamesSEXP, SEXP parametersSEXP, SEXP cholSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type formula(formulaSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type colnames(colnamesSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< bool >::type chol(cholSEXP);
    rcpp_result_gen = Rcpp::wrap(genQ(formula, data, colnames, parameters, chol));
    return rcpp_result_gen;
END_RCPP
}
// x_names
std::vector<std::string> x_names(const std::string& formula);
RcppExport SEXP _glmmrBase_x_names(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(x_names(formula));
    return rcpp_result_gen;
END_RCPP
}
// re_names
std::vector<std::string> re_names(const std::string& formula);
RcppExport SEXP _glmmrBase_re_names(SEXP formulaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type formula(formulaSEXP);
    rcpp_result_gen = Rcpp::wrap(re_names(formula));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmmrBase_Covariance__new", (DL_FUNC) &_glmmrBase_Covariance__new, 3},
    {"_glmmrBase_Covariance__Z", (DL_FUNC) &_glmmrBase_Covariance__Z, 1},
    {"_glmmrBase_genX", (DL_FUNC) &_glmmrBase_genX, 3},
    {"_glmmrBase_genQ", (DL_FUNC) &_glmmrBase_genQ, 5},
    {"_glmmrBase_x_names", (DL_FUNC) &_glmmrBase_x_names, 1},
    {"_glmmrBase_re_names", (DL_FUNC) &_glmmrBase_re_names, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmmrBase(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
